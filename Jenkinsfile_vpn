#!groovy
node ("vsphere-vpn-1") {
  def homePath = pwd() + "/"
  def rootPath = "/root/go/src/github.com/rancher/tfp-automation/"
  def testsDir = "github.com/rancher/tfp-automation/tests/${env.TEST_PACKAGE}"
  def job_name = "${JOB_NAME}"
  if (job_name.contains('/')) { 
    job_names = job_name.split('/')
    job_name = job_names[job_names.size() - 1] 
  }
  def testContainer = "${job_name}${env.BUILD_NUMBER}_test"
  def imageName = "tfp-automation-validation-${job_name}${env.BUILD_NUMBER}"
  def testResultsOut = "results.xml"
  def testResultsJSON = "results.json"
  def envFile = ".env"
  def config = env.CONFIG
  def testPackage = env.TEST_PACKAGE?.trim()
  def branch = "${env.BRANCH}"
  if ("${env.BRANCH}" != "null" && "${env.BRANCH}" != "") {
        branch = "${env.BRANCH}"
  }
  def repo = scm.userRemoteConfigs
  if ("${env.REPO}" != "null" && "${env.REPO}" != "") {
    repo = [[url: "${env.REPO}"]]
  }
  def timeout = "${env.TIMEOUT}"
  if ("${env.TIMEOUT}" != "null" && "${env.TIMEOUT}" != "") {
        timeout = "${env.TIMEOUT}" 
  }
  withCredentials([ string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY'),
                    string(credentialsId: 'RANCHER_LINODE_ACCESSKEY', variable: 'RANCHER_LINODE_ACCESSKEY'),
                    string(credentialsId: 'AWS_SSH_PEM_KEY', variable: 'AWS_SSH_PEM_KEY'),
                    string(credentialsId: 'AWS_SSH_KEY_NAME', variable: 'AWS_SSH_KEY_NAME'),
                    string(credentialsId: 'EXTERNAL_ENCODED_VPN', variable: 'EXTERNAL_ENCODED_VPN'),
                    string(credentialsId: 'VPN_ENCODED_LOGIN', variable: 'VPN_ENCODED_LOGIN'),
                    string(credentialsId: 'QASE_AUTOMATION_TOKEN', variable: 'QASE_AUTOMATION_TOKEN')]) {
  stage('Checkout') {
          deleteDir()
          checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${branch}"]],
                    extensions: scm.extensions + [[$class: 'CleanCheckout']],
                    userRemoteConfigs: repo
                  ])
        }
    stage('Configure and Build') {   
      config = config.replace('${AWS_SECRET_ACCESS_KEY}', env.AWS_SECRET_ACCESS_KEY)
      config = config.replace('${AWS_ACCESS_KEY_ID}', env.AWS_ACCESS_KEY_ID)
      config = config.replace('${RANCHER_LINODE_ACCESSKEY}', env.RANCHER_LINODE_ACCESSKEY)
       
      writeFile file: 'config.yml', text: config

      def decoded = new String(env.AWS_SSH_PEM_KEY.decodeBase64())
      writeFile file: 'key.pem', text: decoded
      
      env.CATTLE_TEST_CONFIG=rootPath+'config.yml'

      sh "./configure.sh"
      sh "./build.sh"
    }
    stage('Run Module Test') {
      def testResultsDir = rootPath+"results"
      sh "mkdir -p ${testResultsDir}"

      def runArgs = ""
      if (env.EXTERNAL_ENCODED_VPN) {
        runArgs = runArgs + "openvpn --daemon --config external.ovpn && sleep 10 && "
      }
      runArgs = runArgs + "/root/go/bin/gotestsum --format standard-verbose --packages=${testsDir} --junitfile results/${testResultsOut} --jsonfile results/${testResultsJSON} -- -timeout=${timeout} -v ${params.TEST_CASE}"
      try {
            sh "docker run --name ${testContainer} -t --env-file ${envFile} ${imageName} sh -c \"${runArgs}\";" +
            "${rootPath}pipeline/scripts/build_qase_reporter.sh\""
            if (fileExists("${rootPath}reporter")) {
              sh "${rootPath}reporter"
            } 
      } catch(err) {
          echo 'Test run had failures. Collecting results...'
      }
    }
    stage('Test Report') {
      sh "docker cp ${testContainer}:${rootPath}results/${testResultsOut} ."
      step([$class: 'JUnitResultArchiver', testResults: "**/${testResultsOut}"])
      sh "docker stop ${testContainer}"
      sh "docker rm -v ${testContainer}"
      sh "docker rmi -f ${imageName}"
      if (testPackage?.toLowerCase().contains("sanity")) {
        slackSend(channel: "${SLACK_CHANNEL}", message: "${env.JOB_NAME} Build #${env.BUILD_NUMBER} finished. More details: ${env.BUILD_URL}")
      }
    }
  }
}